name: Lint and Test Workflow
run-name: Running Linters üîé and Tests ‚åõ

on:
  pull_request:
    branches:
      mainline
  push:
    branches:
      - mainline
      - setup

jobs:
  run-linters:
    name: Linting
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - 3.9
    runs-on: ${{ matrix.os }}

    steps:
      - name: Changes by ${{ github.actor }} on branch ${{ github.ref }}
        run: |
          echo "üñ•Ô∏è Changes by ${{ github.actor }} on branch ${{ github.ref }}"

      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install black flake8 isort

      - name: Run Linters
        run: |
          echo "Running black linter ‚ö´"
          black . --check
          echo "Running flake8 linter ‚ùÑÔ∏è"
          flake8 .  --count --show-source --statistics
          echo "Running isort linter üßπ"
          isort .

  run-tests:
    name: Testing
    needs: run-linters
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - 3.9
    runs-on: ${{ matrix.os }}

    steps:
      - name: Changes by ${{ github.actor }} on branch ${{ github.ref }}
        run: |
          echo "üñ•Ô∏è Changes by ${{ github.actor }} on branch ${{ github.ref }}"

      - name: Check out ${{ github.repository }}
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.6.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Test with pytest
        run: poetry run pytest --cov
